/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./dist/en/oneProportion/oneProportionEntry.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/en/oneProportion/calculation.js":
/*!**********************************************!*\
  !*** ./dist/en/oneProportion/calculation.js ***!
  \**********************************************/
/*! exports provided: cal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cal\", function() { return cal; });\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar cal = {\n  generateLabels: function generateLabels(noOfCoin) {\n    var labels = Array(noOfCoin + 1);\n\n    for (var i = 0; i < noOfCoin + 1; i++) {\n      labels[i] = i;\n    }\n\n    return labels;\n  },\n  calculateBinonimal: function calculateBinonimal(noOfCoin, probability, totalSamples) {\n    var coeff = Array(noOfCoin + 1).fill(0);\n    coeff[0] = 1;\n    var binomailBase = Array(noOfCoin + 1);\n    /**\n     * dynamic programming\n     */\n\n    binomailBase[0] = Math.pow(1 - probability, noOfCoin);\n\n    for (var i = 1; i < noOfCoin + 1; i++) {\n      coeff[i] = coeff[i - 1] * (noOfCoin + 1 - i) / i;\n      binomailBase[i] = coeff[i] * Math.pow(1 - probability, noOfCoin - i) * Math.pow(probability, i);\n    }\n\n    return binomailBase.map(function (x) {\n      return x * totalSamples;\n    });\n  },\n  drawSamples: function drawSamples(probability, noOfCoin, noOfDraw) {\n    var drawResults = Array(noOfDraw);\n\n    for (var i = 0; i < noOfDraw; i++) {\n      var singleDraw = Array(noOfCoin).fill(NaN);\n      drawResults[i] = singleDraw.map(function (x) {\n        return Math.random() < probability ? 1 : 0;\n      });\n    }\n\n    return drawResults;\n  },\n  calculateMean: function calculateMean(sampleData) {\n    return (// i = no of heads\n      // x = frequency\n      sampleData.reduce(function (acc, x, i) {\n        return acc + x * i;\n      }, 0) / sampleData.reduce(function (acc, x) {\n        return acc + x;\n      }, 0)\n    );\n  },\n  calucalteStd: function calucalteStd(sampleData) {\n    var mean = cal.calculateMean(sampleData);\n    return sampleData.reduce(function (acc, x, i) {\n      return acc + (i - mean) * (i - mean) * x;\n    }, 0) / sampleData.reduce(function (acc, x) {\n      return acc + x;\n    }, 0);\n  },\n  calculateSamplesSelected: function calculateSamplesSelected(lower, upper, samples) {\n    lower = lower >= 0 ? lower : 0;\n    upper = upper <= samples.length ? upper : samples.length;\n    return samples.reduce(function (acc, x, i) {\n      if (i >= lower && i <= upper) return acc + x;\n      return acc;\n    }, 0);\n  },\n\n  /**\n   * Useed for chartJS, selected heads will be zero,\n   * 'fill end' method in chartJS will fill the whole area.\n   * , othereise will be NaN. return array size = noOfCoin +2\n   *  so the the chart will extend to end.\n   */\n  generateSelectedArray: function generateSelectedArray(lower, upper, noOfCoin) {\n    lower = lower >= 0 ? lower : 0;\n    upper = upper <= noOfCoin + 2 ? upper : noOfCoin + 2;\n    var selected = Array(noOfCoin + 2).fill(NaN);\n    return selected.map(function (x, i) {\n      if (i >= lower && i <= upper + 1) return 0;\n      return x;\n    });\n  },\n\n  /**\n   * eg. originalSamples = [1, 2, 3, 4, 5, 6];\n  * eg.  const drawResults = [\n          [0, 0, 0, 1, 1], // total heads 2\n          [0, 1, 0, 1, 1], // total heads 3\n          [0, 0, 1, 1, 1], // total heads 3\n          [1, 0, 0, 1, 1] // total heads 3\n        ];\n        return [1, 2, 4, 7, 5, 6];\n   */\n  addSamples: function addSamples(originalSamples, drawResults) {\n    var summary = drawResults.reduce(function (acc, eachDraw) {\n      var noOfHead = eachDraw.reduce(function (accHeads, head) {\n        return accHeads + head;\n      }, 0);\n      var headsCount = acc[noOfHead] + 1 || 1;\n      return _objectSpread({}, acc, _defineProperty({}, noOfHead, headsCount));\n    }, {});\n    return originalSamples.map(function (x, i) {\n      return x + (summary[i] || 0);\n    });\n  },\n  calculateSelectedProportion: function calculateSelectedProportion(selected, total) {\n    return selected / total;\n  }\n};\n\n\n//# sourceURL=webpack:///./dist/en/oneProportion/calculation.js?");

/***/ }),

/***/ "./dist/en/oneProportion/chartModule.js":
/*!**********************************************!*\
  !*** ./dist/en/oneProportion/chartModule.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ChartModule; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ChartModule =\n/*#__PURE__*/\nfunction () {\n  function ChartModule(canvasEle, translation) {\n    var _this = this;\n\n    _classCallCheck(this, ChartModule);\n\n    this.zoomIn = false;\n    this.color = {\n      sample: \"rgba(255,0,0,0.7)\",\n      binomial: \"rgba(0,0,255,0.6)\",\n      selected: \"rgba(0,255,0,0.6)\",\n      line: \"rgba(0,255,0,0.6)\",\n      box: \"rgba(0,255,0,0.1)\",\n      invisible: \"rgba(0,255,0,0.0)\"\n    };\n    this.translationData = translation; // console.log(this.translationData);\n\n    this.dataFromCalculation = {\n      theoryMean: 0,\n      noOfSelected: 0\n    };\n    var ctx = canvasEle.getContext(\"2d\");\n    this.chart = new Chart(ctx, {\n      type: \"bar\",\n      data: {\n        labels: [],\n        datasets: [{\n          label: this.translationData.Samples,\n          data: [],\n          borderWidth: 1,\n          id: \"x-axis-1\",\n          backgroundColor: this.color.sample,\n          hidden: false\n        }, {\n          type: \"bubble\",\n          label: this.translationData.binomial,\n          data: [],\n          borderWidth: 0.1,\n          id: \"x-axis-2\",\n          backgroundColor: this.color.binomial,\n          radius: 10,\n          hidden: false\n        }, {\n          type: \"line\",\n          label: this.translationData.selected,\n          data: [],\n          borderWidth: 0.1,\n          id: \"x-axis-3\",\n          backgroundColor: this.color.selected,\n          hidden: false,\n          fill: \"end\"\n        }]\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            },\n            scaleLabel: {\n              display: true,\n              labelString: this.translationData.noOfSamples,\n              fontColor: \"black\",\n              fontSize: \"14\"\n            }\n          }],\n          xAxes: [{\n            barPercentage: 1.0,\n            scaleLabel: {\n              display: true,\n              labelString: this.translationData.noOfHeads,\n              fontColor: \"black\",\n              fontSize: \"14\"\n            }\n          }]\n        },\n        responsive: true,\n        maintainAspectRatio: true,\n        tooltips: {\n          mode: \"index\",\n          backgroundColor: \"rgba(0,0,0,1.0)\",\n          callbacks: {\n            title: function title(tooltipItem, data) {\n              var title = tooltipItem[0].xLabel || \"\";\n              title += \" heads\";\n              return title;\n            },\n            label: function label(tooltipItem, data) {\n              if (tooltipItem.datasetIndex !== 2) {\n                return \"\".concat(data.datasets[tooltipItem.datasetIndex].label, \" : \").concat(tooltipItem.yLabel);\n              } else {\n                return \"\".concat(data.datasets[tooltipItem.datasetIndex].label, \" : \").concat(_this.dataFromCalculation.noOfSelected);\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n\n  _createClass(ChartModule, [{\n    key: \"updateChartData\",\n    value: function updateChartData(dataSet) {\n      var labels = dataSet.labels,\n          samples = dataSet.samples,\n          binomail = dataSet.binomail,\n          selected = dataSet.selected,\n          probability = dataSet.probability,\n          noOfCoin = dataSet.noOfCoin,\n          noOfSelected = dataSet.noOfSelected,\n          mean = dataSet.mean,\n          zoomIn = dataSet.zoomIn;\n\n      if (!zoomIn) {\n        this.chart.data.labels = labels;\n        this.chart.data.datasets[0].data = samples;\n        this.chart.data.datasets[1].data = binomail;\n        this.chart.data.datasets[2].data = selected;\n      } else {\n        var roundedMean = Math.floor(probability * noOfCoin);\n        var HALF_WIDTH = 25;\n        var lowerRange, upperRange;\n\n        if (roundedMean - HALF_WIDTH <= 0) {\n          lowerRange = 0;\n          upperRange = lowerRange + HALF_WIDTH * 2;\n        } else if (roundedMean + HALF_WIDTH >= noOfCoin) {\n          upperRange = noOfCoin + 1;\n          lowerRange = upperRange - HALF_WIDTH * 2;\n        } else {\n          lowerRange = roundedMean - HALF_WIDTH;\n          upperRange = roundedMean + HALF_WIDTH;\n        }\n\n        upperRange = lowerRange + HALF_WIDTH * 2;\n        this.chart.data.labels = labels.slice(lowerRange, upperRange);\n        this.chart.data.datasets[0].data = samples.slice(lowerRange, upperRange);\n        this.chart.data.datasets[1].data = binomail.slice(lowerRange, upperRange);\n        this.chart.data.datasets[2].data = selected.slice(lowerRange, upperRange);\n      }\n\n      this.dataFromCalculation.theoryMean = mean;\n      this.dataFromCalculation.noOfSelected = noOfSelected;\n      this.chart.mean = mean;\n      this.chart.options.scales.xAxes[0].scaleLabel.labelString = \"\".concat(this.translationData.noOfHeads, \" \").concat(noOfCoin, \" \").concat(this.translationData.tosses2);\n      this.chart.update();\n    }\n  }]);\n\n  return ChartModule;\n}();\n\n\nChart.pluginService.register({\n  id: \"offsetBar\",\n  afterUpdate: function afterUpdate(chart) {\n    // We get the dataset and set the offset here\n    var dataset = chart.config.data.datasets[2]; // const width = dataset._meta[0].data[1]._model.x - dataset._meta[0].data[0]._model.x;\n\n    var offset;\n    var meta = Object.values(dataset._meta)[0];\n\n    if (meta.data.length > 0) {\n      offset = -(meta.data[1]._model.x - meta.data[0]._model.x) / 2;\n    } // For every data in the dataset ...\n\n\n    for (var i = 0; i < meta.data.length; i++) {\n      // We get the model linked to this data\n      var model = meta.data[i]._model; // And add the offset to the `x` property\n\n      model.x += offset; // .. and also to these two properties\n      // to make the bezier curve fits the new graph\n\n      model.controlPointNextX += offset;\n      model.controlPointPreviousX += offset;\n    }\n  }\n}); // Chart.pluginService.register({\n//   id: \"sampleBarColor\",\n//   beforeUpdate: function(chart) {\n//     if (chart.mean) {\n//       const chartData = chart.config.data; // sample dataset\n//       chartData.datasets[0].backgroundColor = chartData.labels.map(\n//         x =>\n//           `rgba(255,0,0,${1 -\n//             (Math.abs(x - chart.mean) * 1.2) / chartData.labels.length})`\n//       );\n//     }\n//   }\n// });\n\nChart.pluginService.register({\n  id: \"fixedSamplelegendColor\",\n  afterUpdate: function afterUpdate(chart) {\n    chart.legend.legendItems[0].fillStyle = \"rgba(255,0,0,0.8)\";\n  }\n});\nChart.pluginService.register({\n  id: \"dynamicBubbleSize\",\n  beforeUpdate: function beforeUpdate(chart) {\n    if (chart.mean) {\n      var chartData = chart.config.data; // sample dataset\n\n      var dyanamicSize = 50 / chartData.labels.length;\n      var minSize = 2;\n      chartData.datasets[1].radius = dyanamicSize > minSize ? dyanamicSize : minSize;\n    }\n  }\n});\n\n//# sourceURL=webpack:///./dist/en/oneProportion/chartModule.js?");

/***/ }),

/***/ "./dist/en/oneProportion/oneProportion.js":
/*!************************************************!*\
  !*** ./dist/en/oneProportion/oneProportion.js ***!
  \************************************************/
/*! exports provided: OneProportion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OneProportion\", function() { return OneProportion; });\n/* harmony import */ var _chartModule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chartModule.js */ \"./dist/en/oneProportion/chartModule.js\");\n/* harmony import */ var _calculation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calculation.js */ \"./dist/en/oneProportion/calculation.js\");\n/* harmony import */ var _util_translate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/translate.js */ \"./dist/en/util/translate.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n\nvar OneProportion = function OneProportion(ele) {\n  var _this = this;\n\n  _classCallCheck(this, OneProportion);\n\n  this.initState = function () {\n    return {\n      noOfCoin: 5,\n      probability: 0.5,\n      labels: [],\n      binomail: [],\n      samples: [],\n      selected: [],\n      mean: NaN,\n      std: NaN,\n      noOfSelected: 0,\n      totalSamples: 0,\n      lowerSelectedRange: 0,\n      upperSelectedRange: 0,\n      thisSampleSizes: 1,\n      zoomIn: false\n    };\n  };\n\n  this.ele = {\n    probabilityInput: document.getElementById(\"probability\"),\n    coinsInput: document.getElementById(\"coins\"),\n    probDisplay: document.getElementById(\"probDisplay\"),\n    tossesDisplay: document.querySelectorAll(\"#tossesDisplay\"),\n    lowerDisplay: document.getElementById(\"lowerDisplay\"),\n    upperDisplay: document.getElementById(\"upperDisplay\"),\n    drawInput: document.getElementById(\"draws\"),\n    chart: document.getElementById(\"chart\"),\n    totalSamples: document.getElementById(\"totalSamples\"),\n    lowerSelectedRange: document.getElementById(\"lowerSelectedRange\"),\n    upperSelectedRange: document.getElementById(\"upperSelectedRange\"),\n    sampleInRangeDisplay: document.getElementById(\"sampleInRangeDisplay\"),\n    resetBtn: document.getElementById(\"resetBtn\"),\n    sampleBtn: document.getElementById(\"sampleBtn\"),\n    proportionDisplay: document.getElementById(\"proportionDisplay\"),\n    meanDisplay: document.getElementById(\"meanDisplay\"),\n    stdDisplay: document.getElementById(\"stdDisplay\")\n  };\n  this.state = this.initState();\n  this.translationData = _util_translate_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].oneProportion; // console.log('one',this.translationData)\n\n  this.chart = new _chartModule_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.ele.chart, this.translationData);\n\n  this.reset = function (e) {\n    _this.state = _this.initState();\n\n    _this.updateView(_this.state, _this.ele);\n\n    e.preventDefault();\n  };\n\n  this.reSampleWithSameSampleSize = function (state) {\n    var reSamples = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].drawSamples(state.probability, state.noOfCoin, state.totalSamples);\n    state.samples = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].addSamples(Array(state.noOfCoin + 1).fill(0), reSamples);\n\n    _this.updateState(state);\n\n    _this.updateView(state, _this.ele);\n  };\n\n  this.loadEventListener = function () {\n    _this.ele.probabilityInput.addEventListener(\"input\", function (e) {\n      _this.state.probability = Number(e.target.value);\n      probDisplay.innerText = Number(e.target.value);\n    });\n\n    _this.ele.probabilityInput.addEventListener(\"change\", function () {\n      if (_this.state.labels.length !== 0) {\n        _this.reSampleWithSameSampleSize(_this.state);\n      }\n    }); // this.ele.coinsInput.addEventListener(\"change\", e => {\n    //   this.ele.tossesDisplay.forEach(\n    //     x => (x.innerText = Number(e.target.value))\n    //   );\n    //   this.state.noOfCoin = Number(e.target.value);\n    // });\n\n\n    _this.ele.coinsInput.addEventListener(\"change\", function (e) {\n      _this.ele.tossesDisplay.forEach(function (x) {\n        return x.innerText = Number(e.target.value);\n      });\n\n      _this.state.noOfCoin = Number(e.target.value);\n\n      if (_this.state.labels.length !== 0) {\n        _this.reSampleWithSameSampleSize(_this.state);\n      }\n    });\n\n    _this.ele.drawInput.addEventListener(\"change\", function (e) {\n      _this.state.thisSampleSizes = Number(e.target.value);\n    });\n\n    _this.ele.resetBtn.addEventListener(\"click\", _this.reset);\n\n    _this.ele.sampleBtn.addEventListener(\"click\", function (e) {\n      _this.state.totalSamples += _this.state.thisSampleSizes;\n      var _this$state = _this.state,\n          probability = _this$state.probability,\n          noOfCoin = _this$state.noOfCoin,\n          thisSampleSizes = _this$state.thisSampleSizes;\n      var newSamples = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].drawSamples(probability, noOfCoin, thisSampleSizes);\n      if (_this.state.samples.length === 0) _this.state.samples = Array(_this.state.noOfCoin + 1).fill(0);\n      _this.state.samples = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].addSamples(_this.state.samples, newSamples);\n\n      _this.updateState(_this.state);\n\n      _this.updateView(_this.state, _this.ele);\n\n      e.preventDefault();\n    });\n    /**\n     * Double Click to Zoom in if no of toss > 50;\n     */\n\n\n    _this.ele.chart.addEventListener(\"dblclick\", function () {\n      if (!_this.state.zoomIn && _this.state.noOfCoin >= 50) _this.state.zoomIn = true;else _this.state.zoomIn = false;\n\n      _this.chart.updateChartData(_this.state);\n    });\n\n    _this.ele.lowerSelectedRange.addEventListener(\"input\", function (e) {\n      _this.state.lowerSelectedRange = Number(e.target.value);\n\n      _this.updateState(_this.state);\n\n      _this.updateView(_this.state, _this.ele);\n    });\n\n    _this.ele.upperSelectedRange.addEventListener(\"input\", function (e) {\n      _this.state.upperSelectedRange = Number(e.target.value);\n\n      _this.updateState(_this.state);\n\n      _this.updateView(_this.state, _this.ele);\n    });\n  };\n\n  this.updatedSelectedSamples = function (state) {\n    var lowerSelectedRange = state.lowerSelectedRange,\n        upperSelectedRange = state.upperSelectedRange;\n    state.noOfSelected = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].calculateSamplesSelected(lowerSelectedRange, upperSelectedRange, state.samples);\n    state.selected = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].generateSelectedArray(lowerSelectedRange, upperSelectedRange, state.noOfCoin);\n  };\n\n  this.updateState = function (state) {\n    state.labels = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].generateLabels(state.noOfCoin);\n    state.binomail = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].calculateBinonimal(state.noOfCoin, state.probability, state.totalSamples);\n    state.mean = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].calculateMean(state.samples);\n    state.std = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].calucalteStd(state.samples); // this.state.zoomIn = state.noOfCoin >= 50 ? true : false;\n\n    _this.updatedSelectedSamples(state);\n  };\n\n  this.updateView = function (state, ele) {\n    var probability = state.probability,\n        noOfCoin = state.noOfCoin,\n        totalSamples = state.totalSamples,\n        mean = state.mean,\n        std = state.std,\n        thisSampleSizes = state.thisSampleSizes,\n        noOfSelected = state.noOfSelected,\n        lowerSelectedRange = state.lowerSelectedRange,\n        upperSelectedRange = state.upperSelectedRange;\n    ele.probDisplay.innerText = probability;\n    ele.tossesDisplay.innerText = noOfCoin;\n    ele.totalSamples.innerText = totalSamples;\n    ele.meanDisplay.innerText = mean.toFixed(3);\n    ele.stdDisplay.innerText = std.toFixed(3);\n    ele.drawInput.value = thisSampleSizes;\n    ele.coinsInput.value = noOfCoin;\n    ele.lowerSelectedRange.setAttribute(\"max\", noOfCoin);\n    ele.upperSelectedRange.setAttribute(\"max\", noOfCoin);\n    ele.probabilityInput.value = probability;\n    ele.sampleInRangeDisplay.innerText = noOfSelected;\n    if (lowerSelectedRange > noOfCoin) _this.state.lowerSelectedRange = noOfCoin;\n    if (upperSelectedRange > noOfCoin) _this.state.upperSelectedRange = noOfCoin;\n    ele.lowerSelectedRange.value = lowerSelectedRange;\n    ele.upperSelectedRange.value = upperSelectedRange;\n    ele.lowerDisplay.innerText = lowerSelectedRange;\n    ele.upperDisplay.innerText = upperSelectedRange;\n    ele.proportionDisplay.innerText = \"\".concat(noOfSelected, \" / \").concat(totalSamples, \" = \").concat((noOfSelected / totalSamples).toFixed(3));\n\n    _this.chart.updateChartData(state);\n  };\n\n  this.updateView(this.state, this.ele);\n  this.loadEventListener();\n};\n\n//# sourceURL=webpack:///./dist/en/oneProportion/oneProportion.js?");

/***/ }),

/***/ "./dist/en/oneProportion/oneProportionEntry.js":
/*!*****************************************************!*\
  !*** ./dist/en/oneProportion/oneProportionEntry.js ***!
  \*****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _oneProportion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./oneProportion.js */ \"./dist/en/oneProportion/oneProportion.js\");\n\nwindow.oneProportion = new _oneProportion_js__WEBPACK_IMPORTED_MODULE_0__[\"OneProportion\"](document.getElementById('one-proportion'));\n\n//# sourceURL=webpack:///./dist/en/oneProportion/oneProportionEntry.js?");

/***/ }),

/***/ "./dist/en/util/translate.js":
/*!***********************************!*\
  !*** ./dist/en/util/translate.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar translation = {\n  \"about\": {\n    \"contact\": \"Contact\",\n    \"content1\": \"Statistical Analysis Visualizations for Introductory Statistics (SAVIS) was conceived as part of a collaborative research project on statistical education between the Department of Mathematics and Statistics at California State University Sacramento (CSUS) and the School of Mathematics of the Universidad Autónoma de Yucatán (UADY). SAVIS is an educational tool to help to intuitively understand concepts of tests of statistical hypotheses and confidence intervals using visualizations based on resampling and randomization techniques. SAVIS has an online and a stand-alone version (both freely available) in English and Spanish.\",\n    \"content2\": \"SAVIS was created in the Spring of 2019  and extended in the Spring of 2020 by the following graduating seniors from the Department of Computer Science at CSUS under the direction of Rafael E. Diaz Escamilla, a professor in the Department of Mathematics and Statistics at CSUS:\",\n    \"contributors\": \"Contributors\",\n    \"title\": \"About\"\n  },\n  \"download\": {\n    \"title\": \"Download\"\n  },\n  \"home\": {\n    \"title\": \"Home\"\n  },\n  \"oneMean\": {\n    \"InInterval\": \"Values in Interval\",\n    \"NotInInterval\": \"Values not in Interval\",\n    \"Samples\": \"Samples\",\n    \"build\": \"Build\",\n    \"chartTitle2\": \"Generate Hypothetical Population\",\n    \"chartTitle4\": \"Sampling Distribution of Means\",\n    \"ci\": \"Confidence Level\",\n    \"cititle\": \"One Mean Confidence Interval\",\n    \"drawSample\": \"Draw Sample\",\n    \"enterData\": \"Enter Data:\",\n    \"errorNoPopulation\": \"No population data\",\n    \"errorNotEnoughElements\": \"Sample exceeds population\",\n    \"extremeSamples\": \"Sample means at least as extreme as\",\n    \"hypotheticalPopulation\": \"Hypothetical Population\",\n    \"id\": \"ID\",\n    \"increaseData\": \"Increase data\",\n    \"loadData\": \"Load Data\",\n    \"lower\": \"Lower Bound:\",\n    \"mean1\": \"Mean:\",\n    \"mean2\": \"Mean\",\n    \"meanOfsamplesMeans\": \"Mean of sample means:\",\n    \"mostRecentDraw\": \"Most Recent Draw\",\n    \"noData\": \"NaN\",\n    \"noOfSample\": \"# of samples\",\n    \"oneTailLeft\": \"One Tail Left\",\n    \"oneTailRight\": \"One Tail Right\",\n    \"original\": \"Original Dataset\",\n    \"originalSize\": \"Size n:\",\n    \"pleaseSelect\": \"Type of Test\",\n    \"proportion\": \"Proportion:\",\n    \"reset\": \"Reset\",\n    \"runSim\": \"Run Simulation\",\n    \"sample\": \"Sample XXX\",\n    \"sampleMeans\": \"sample means\",\n    \"sampleNo\": \"#\",\n    \"sampleSize\": \"Sample size:\",\n    \"samples\": \"samples\",\n    \"sd1\": \"Standard Deviation:\",\n    \"selectData\": \"Select Sample Data\",\n    \"shiftMean\": \"Shift mean\",\n    \"std\": \"Standard Deviation\",\n    \"textAreaPlaceHolder\": \"Please enter data or drop columns from cvs file here (no column titles - see sample data in drop down menu)\",\n    \"times\": \"times\",\n    \"title\": \"One Mean Hypothesis Testing\",\n    \"totalNoOfSamples\": \"Total # of samples:\",\n    \"totalSamples\": \"Total # samples:\",\n    \"twoTail\": \"Two Tails\",\n    \"upload\": \"Upload Data File\",\n    \"upper\": \"Upper Bound:\",\n    \"value\": \"Value\"\n  },\n  \"oneProportion\": {\n    \"InInterval\": \"Values in Interval\",\n    \"NotInInterval\": \"Values not in Interval\",\n    \"Samples\": \"Samples\",\n    \"addSamples\": \"Add samples\",\n    \"alertAtLeastOne\": \"You must have at least one successes and failures\",\n    \"binomial\": \"Binomial Prediction\",\n    \"build\": \"Build\",\n    \"ci\": \"Confidence Level\",\n    \"cititle\": \"One Proportion Confidence Interval\",\n    \"data\": \"Data\",\n    \"drawSamples\": \"Draw Samples\",\n    \"enterData\": \"Enter Data:\",\n    \"failures\": \"Failures\",\n    \"inc\": \"Increase By\",\n    \"incrementWarning\": \"Please increment the data for group\",\n    \"incrementZeroWarning\": \"Increase by factor must be greater than zero\",\n    \"loadData\": \"Load Data\",\n    \"lower\": \"Lower Bound:\",\n    \"maxHead\": \"Max # of head:\",\n    \"meanNoOfHeads\": \"Mean # of heads:\",\n    \"meanOfSampleDiff\": \"Mean of Sample Proportions\",\n    \"minHead\": \"Min # of heads:\",\n    \"mostRecentDraw\": \"Most Recent Draw\",\n    \"noData\": \"NaN\",\n    \"noOfHeads\": \"# of heads in\",\n    \"noOfSamples\": \"# of samples\",\n    \"noOfSims\": \"# of Simulations\",\n    \"probHeads\": \"Probability of Heads p:\",\n    \"propOfRandom\": \"Proportion of Successes of Most Recent Draw\",\n    \"proportion\": \"Proportion:\",\n    \"proportion1\": \"Proportion of Successes\",\n    \"remark1\": \"1. Double click the graph to zoom in/out if # of tosses >= 50.\",\n    \"remark2\": \"2. Click the legend to hide/show corresponding info in graph.\",\n    \"remarkTitle\": \"Remarks:\",\n    \"reset\": \"Reset\",\n    \"runSims\": \"Run Simulations\",\n    \"samplesInterval\": \"# of samples in interval:\",\n    \"selectInterval\": \"Select interval for # of heads in\",\n    \"selected\": \"Selected\",\n    \"standardDeviation\": \"Standard Deviation\",\n    \"std\": \"Standard Deviation:\",\n    \"subTitle3\": \"Sampling Distribution of Proportions\",\n    \"successes\": \"Successes\",\n    \"title\": \"One Proportion Hypothesis Testing\",\n    \"tosses1\": \"Tosses:\",\n    \"tosses2\": \"tosses:\",\n    \"totalSamples\": \"Total samples:\",\n    \"upper\": \"Upper Bound:\"\n  },\n  \"site\": {\n    \"title\": \"Statistical Analysis Visualizations for Introductory Statistics\"\n  },\n  \"tailChart\": {\n    \"oneTailLeft\": \"One Tail Left\",\n    \"oneTailRight\": \"One Tail Right\",\n    \"pleaseSelect\": \"Type of Test\",\n    \"twoTail\": \"Two Tails\"\n  },\n  \"twoMean\": {\n    \"InInterval\": \"Values in Interval\",\n    \"NotInInterval\": \"Values not in Interval\",\n    \"Samples\": \"Samples\",\n    \"alertAtLeastOne\": \"Group 1 and Group 2 must both have at least one element.\",\n    \"build\": \"Build\",\n    \"ci\": \"Confidence Level\",\n    \"cititle\": \"Two Means Confidence Interval\",\n    \"diffOfMean\": \"Difference of Means (Mean 1 - Mean 2):\",\n    \"diffOfSampleMean\": \"Difference of Means (Randomized Samples):\",\n    \"differences\": \"Differences\",\n    \"enterData\": \"Enter Data\",\n    \"gp1Mean\": \"Mean 1 (Group 1):\",\n    \"gp1SD\": \"Standard Deviation (Group 1):\",\n    \"gp2Mean\": \"Mean 2 (Group 2):\",\n    \"gp2SD\": \"Standard Deviation (Group 2):\",\n    \"group1\": \"Group 1\",\n    \"group2\": \"Group 2\",\n    \"inc1\": \"Increase By (Group 1)\",\n    \"inc2\": \"Increase By (Group 2)\",\n    \"incrementWarning\": \"Please increment the data for group\",\n    \"incrementZeroWarning\": \"Increase by factor must be greater than zero\",\n    \"loadData\": \"Load Data\",\n    \"lower\": \"Lower Bound:\",\n    \"meanSampleDiff\": \"Mean of Sample Differences:\",\n    \"mostRecentDraw\": \"Most Recent Draw\",\n    \"noData\": \"NaN\",\n    \"numSelected\": \"# of Extreme Differences:\",\n    \"numSim\": \"# of Simulations\",\n    \"oriDiffOfMean\": \"Original Dataset Difference of Means:\",\n    \"placeholder\": \"Enter or Drop CSV with first column as group number (1 or 2) and second column as variable. No colunm names (see sample data in drop down menu)\",\n    \"proportionSelcted\": \"Proportion of Extreme Differences\",\n    \"randomMean1\": \"Mean of Randomized Sample to Group 1:\",\n    \"randomMean2\": \"Mean of Randomized Sample to Group 2:\",\n    \"randomSD1\": \"Standard Deviation of Randomized Sample to Group 1:\",\n    \"randomSD2\": \"Standard Deviation of Randomized Sample to Group 2:\",\n    \"reset\": \"Reset\",\n    \"runSim\": \"Run Simulation\",\n    \"runSims\": \"Run Simulations\",\n    \"selectAllExtreme\": \"Select differences at least as extreme as\",\n    \"selectData\": \"Select Sample Data\",\n    \"size1\": \"Size n (Group 1):\",\n    \"size2\": \"Size n (Group 2):\",\n    \"stdSampleDiff\": \"Standard Deviation:\",\n    \"subTitle3\": \"Sampling Distribution of Difference of Means\",\n    \"title\": \"Two Means Hypothesis Testing\",\n    \"totalSamples\": \"Total # samples:\",\n    \"upload\": \"Upload Data File\",\n    \"upper\": \"Upper Bound:\"\n  },\n  \"twoProportions\": {\n    \"InInterval\": \"Values in Interval\",\n    \"NotInInterval\": \"Values not in Interval\",\n    \"alertAtLeastOne\": \"Group A and Group B must both have at least one element.\",\n    \"build\": \"Build\",\n    \"ci\": \"Confidence Level\",\n    \"cititle\": \"Two Proportions Confidence Interval\",\n    \"diffOfProp\": \"Difference of Proportions\",\n    \"differences\": \"Differences\",\n    \"enterData\": \"Enter Data:\",\n    \"failures\": \"Failures\",\n    \"groupA\": \"Group A\",\n    \"groupB\": \"Group B\",\n    \"inc\": \"Increase By\",\n    \"incrementWarning\": \"Please increment the data for group\",\n    \"incrementZeroWarning\": \"Increase by factor must be greater than zero\",\n    \"loadData\": \"Load Data\",\n    \"lower\": \"Lower Bound:\",\n    \"meanOfSampleDiff\": \"Mean of Sample Differences:\",\n    \"mostRecentDraw\": \"Most Recent Draw\",\n    \"noData\": \"NaN\",\n    \"noOfSelected\": \"# Extreme Differences:\",\n    \"noOfSims\": \"# of Simulations\",\n    \"noSim\": \"N/A\",\n    \"oriDatasetDiff\": \"Difference of Proportions in Original Data:\",\n    \"propGroupA\": \"Proportion of Succeses in Group A\",\n    \"propGroupB\": \"Proportion of Successes in Group B\",\n    \"propOfRandomA\": \"Proportion of Successes Randomized to Group A\",\n    \"propOfRandomB\": \"Proportion of Successes Randomized to Group B\",\n    \"propSamplesSelected\": \"Proportion Extreme Differences:\",\n    \"runSims\": \"Run Simulations\",\n    \"selectAllExtreme\": \"Select differences as extreme as:\",\n    \"std\": \"Standard Deviation:\",\n    \"subTitle3\": \"Sampling Distribution of Difference of Proportions\",\n    \"successes\": \"Successes\",\n    \"title\": \"Two Proportions Hypothesis Testing\",\n    \"totalSamples\": \"Total # Samples:\",\n    \"upper\": \"Upper Bound:\"\n  },\n  \"userManual\": {\n    \"title\": \"User Manual\"\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (translation);\n\n//# sourceURL=webpack:///./dist/en/util/translate.js?");

/***/ })

/******/ });