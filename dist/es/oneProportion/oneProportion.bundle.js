/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./dist/es/oneProportion/oneProportionEntry.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/es/oneProportion/calculation.js":
/*!**********************************************!*\
  !*** ./dist/es/oneProportion/calculation.js ***!
  \**********************************************/
/*! exports provided: cal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cal\", function() { return cal; });\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar cal = {\n  generateLabels: function generateLabels(noOfCoin) {\n    var labels = Array(noOfCoin + 1);\n\n    for (var i = 0; i < noOfCoin + 1; i++) {\n      labels[i] = i;\n    }\n\n    return labels;\n  },\n  calculateBinonimal: function calculateBinonimal(noOfCoin, probability, totalSamples) {\n    var coeff = Array(noOfCoin + 1).fill(0);\n    coeff[0] = 1;\n    var binomailBase = Array(noOfCoin + 1);\n    /**\n     * dynamic programming\n     */\n\n    binomailBase[0] = Math.pow(1 - probability, noOfCoin);\n\n    for (var i = 1; i < noOfCoin + 1; i++) {\n      coeff[i] = coeff[i - 1] * (noOfCoin + 1 - i) / i;\n      binomailBase[i] = coeff[i] * Math.pow(1 - probability, noOfCoin - i) * Math.pow(probability, i);\n    }\n\n    return binomailBase.map(function (x) {\n      return x * totalSamples;\n    });\n  },\n  drawSamples: function drawSamples(probability, noOfCoin, noOfDraw) {\n    var drawResults = Array(noOfDraw);\n\n    for (var i = 0; i < noOfDraw; i++) {\n      var singleDraw = Array(noOfCoin).fill(NaN);\n      drawResults[i] = singleDraw.map(function (x) {\n        return Math.random() < probability ? 1 : 0;\n      });\n    }\n\n    return drawResults;\n  },\n  calculateMean: function calculateMean(sampleData) {\n    return (// i = no of heads\n      // x = frequency\n      sampleData.reduce(function (acc, x, i) {\n        return acc + x * i;\n      }, 0) / sampleData.reduce(function (acc, x) {\n        return acc + x;\n      }, 0)\n    );\n  },\n  calucalteStd: function calucalteStd(sampleData) {\n    var mean = cal.calculateMean(sampleData);\n    return sampleData.reduce(function (acc, x, i) {\n      return acc + (i - mean) * (i - mean) * x;\n    }, 0) / sampleData.reduce(function (acc, x) {\n      return acc + x;\n    }, 0);\n  },\n  calculateSamplesSelected: function calculateSamplesSelected(lower, upper, samples) {\n    lower = lower >= 0 ? lower : 0;\n    upper = upper <= samples.length ? upper : samples.length;\n    return samples.reduce(function (acc, x, i) {\n      if (i >= lower && i <= upper) return acc + x;\n      return acc;\n    }, 0);\n  },\n\n  /**\n   * Useed for chartJS, selected heads will be zero,\n   * 'fill end' method in chartJS will fill the whole area.\n   * , othereise will be NaN. return array size = noOfCoin +2\n   *  so the the chart will extend to end.\n   */\n  generateSelectedArray: function generateSelectedArray(lower, upper, noOfCoin) {\n    lower = lower >= 0 ? lower : 0;\n    upper = upper <= noOfCoin + 2 ? upper : noOfCoin + 2;\n    var selected = Array(noOfCoin + 2).fill(NaN);\n    return selected.map(function (x, i) {\n      if (i >= lower && i <= upper + 1) return 0;\n      return x;\n    });\n  },\n\n  /**\n   * eg. originalSamples = [1, 2, 3, 4, 5, 6];\n  * eg.  const drawResults = [\n          [0, 0, 0, 1, 1], // total heads 2\n          [0, 1, 0, 1, 1], // total heads 3\n          [0, 0, 1, 1, 1], // total heads 3\n          [1, 0, 0, 1, 1] // total heads 3\n        ];\n        return [1, 2, 4, 7, 5, 6];\n   */\n  addSamples: function addSamples(originalSamples, drawResults) {\n    var summary = drawResults.reduce(function (acc, eachDraw) {\n      var noOfHead = eachDraw.reduce(function (accHeads, head) {\n        return accHeads + head;\n      }, 0);\n      var headsCount = acc[noOfHead] + 1 || 1;\n      return _objectSpread({}, acc, _defineProperty({}, noOfHead, headsCount));\n    }, {});\n    return originalSamples.map(function (x, i) {\n      return x + (summary[i] || 0);\n    });\n  },\n  calculateSelectedProportion: function calculateSelectedProportion(selected, total) {\n    return selected / total;\n  }\n};\n\n\n//# sourceURL=webpack:///./dist/es/oneProportion/calculation.js?");

/***/ }),

/***/ "./dist/es/oneProportion/chartModule.js":
/*!**********************************************!*\
  !*** ./dist/es/oneProportion/chartModule.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ChartModule; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ChartModule =\n/*#__PURE__*/\nfunction () {\n  function ChartModule(canvasEle, translation) {\n    var _this = this;\n\n    _classCallCheck(this, ChartModule);\n\n    this.zoomIn = false;\n    this.color = {\n      sample: \"rgba(255,0,0,0.7)\",\n      binomial: \"rgba(0,0,255,0.6)\",\n      selected: \"rgba(0,255,0,0.6)\",\n      line: \"rgba(0,255,0,0.6)\",\n      box: \"rgba(0,255,0,0.1)\",\n      invisible: \"rgba(0,255,0,0.0)\"\n    };\n    this.translationData = translation; // console.log(this.translationData);\n\n    this.dataFromCalculation = {\n      theoryMean: 0,\n      noOfSelected: 0\n    };\n    var ctx = canvasEle.getContext(\"2d\");\n    this.chart = new Chart(ctx, {\n      type: \"bar\",\n      data: {\n        labels: [],\n        datasets: [{\n          label: this.translationData.Samples,\n          data: [],\n          borderWidth: 1,\n          id: \"x-axis-1\",\n          backgroundColor: this.color.sample,\n          hidden: false\n        }, {\n          type: \"bubble\",\n          label: this.translationData.binomial,\n          data: [],\n          borderWidth: 0.1,\n          id: \"x-axis-2\",\n          backgroundColor: this.color.binomial,\n          radius: 10,\n          hidden: false\n        }, {\n          type: \"line\",\n          label: this.translationData.selected,\n          data: [],\n          borderWidth: 0.1,\n          id: \"x-axis-3\",\n          backgroundColor: this.color.selected,\n          hidden: false,\n          fill: \"end\"\n        }]\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            },\n            scaleLabel: {\n              display: true,\n              labelString: this.translationData.noOfSamples,\n              fontColor: \"black\",\n              fontSize: \"14\"\n            }\n          }],\n          xAxes: [{\n            barPercentage: 1.0,\n            scaleLabel: {\n              display: true,\n              labelString: this.translationData.noOfHeads,\n              fontColor: \"black\",\n              fontSize: \"14\"\n            }\n          }]\n        },\n        responsive: true,\n        maintainAspectRatio: true,\n        tooltips: {\n          mode: \"index\",\n          backgroundColor: \"rgba(0,0,0,1.0)\",\n          callbacks: {\n            title: function title(tooltipItem, data) {\n              var title = tooltipItem[0].xLabel || \"\";\n              title += \" heads\";\n              return title;\n            },\n            label: function label(tooltipItem, data) {\n              if (tooltipItem.datasetIndex !== 2) {\n                return \"\".concat(data.datasets[tooltipItem.datasetIndex].label, \" : \").concat(tooltipItem.yLabel);\n              } else {\n                return \"\".concat(data.datasets[tooltipItem.datasetIndex].label, \" : \").concat(_this.dataFromCalculation.noOfSelected);\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n\n  _createClass(ChartModule, [{\n    key: \"updateChartData\",\n    value: function updateChartData(dataSet) {\n      var labels = dataSet.labels,\n          samples = dataSet.samples,\n          binomail = dataSet.binomail,\n          selected = dataSet.selected,\n          probability = dataSet.probability,\n          noOfCoin = dataSet.noOfCoin,\n          noOfSelected = dataSet.noOfSelected,\n          mean = dataSet.mean,\n          zoomIn = dataSet.zoomIn;\n\n      if (!zoomIn) {\n        this.chart.data.labels = labels;\n        this.chart.data.datasets[0].data = samples;\n        this.chart.data.datasets[1].data = binomail;\n        this.chart.data.datasets[2].data = selected;\n      } else {\n        var roundedMean = Math.floor(probability * noOfCoin);\n        var HALF_WIDTH = 25;\n        var lowerRange, upperRange;\n\n        if (roundedMean - HALF_WIDTH <= 0) {\n          lowerRange = 0;\n          upperRange = lowerRange + HALF_WIDTH * 2;\n        } else if (roundedMean + HALF_WIDTH >= noOfCoin) {\n          upperRange = noOfCoin + 1;\n          lowerRange = upperRange - HALF_WIDTH * 2;\n        } else {\n          lowerRange = roundedMean - HALF_WIDTH;\n          upperRange = roundedMean + HALF_WIDTH;\n        }\n\n        upperRange = lowerRange + HALF_WIDTH * 2;\n        this.chart.data.labels = labels.slice(lowerRange, upperRange);\n        this.chart.data.datasets[0].data = samples.slice(lowerRange, upperRange);\n        this.chart.data.datasets[1].data = binomail.slice(lowerRange, upperRange);\n        this.chart.data.datasets[2].data = selected.slice(lowerRange, upperRange);\n      }\n\n      this.dataFromCalculation.theoryMean = mean;\n      this.dataFromCalculation.noOfSelected = noOfSelected;\n      this.chart.mean = mean;\n      this.chart.options.scales.xAxes[0].scaleLabel.labelString = \"\".concat(this.translationData.noOfHeads, \" \").concat(noOfCoin, \" \").concat(this.translationData.tosses2);\n      this.chart.update();\n    }\n  }]);\n\n  return ChartModule;\n}();\n\n\nChart.pluginService.register({\n  id: \"offsetBar\",\n  afterUpdate: function afterUpdate(chart) {\n    // We get the dataset and set the offset here\n    var dataset = chart.config.data.datasets[2]; // const width = dataset._meta[0].data[1]._model.x - dataset._meta[0].data[0]._model.x;\n\n    var offset;\n    var meta = Object.values(dataset._meta)[0];\n\n    if (meta.data.length > 0) {\n      offset = -(meta.data[1]._model.x - meta.data[0]._model.x) / 2;\n    } // For every data in the dataset ...\n\n\n    for (var i = 0; i < meta.data.length; i++) {\n      // We get the model linked to this data\n      var model = meta.data[i]._model; // And add the offset to the `x` property\n\n      model.x += offset; // .. and also to these two properties\n      // to make the bezier curve fits the new graph\n\n      model.controlPointNextX += offset;\n      model.controlPointPreviousX += offset;\n    }\n  }\n}); // Chart.pluginService.register({\n//   id: \"sampleBarColor\",\n//   beforeUpdate: function(chart) {\n//     if (chart.mean) {\n//       const chartData = chart.config.data; // sample dataset\n//       chartData.datasets[0].backgroundColor = chartData.labels.map(\n//         x =>\n//           `rgba(255,0,0,${1 -\n//             (Math.abs(x - chart.mean) * 1.2) / chartData.labels.length})`\n//       );\n//     }\n//   }\n// });\n\nChart.pluginService.register({\n  id: \"fixedSamplelegendColor\",\n  afterUpdate: function afterUpdate(chart) {\n    chart.legend.legendItems[0].fillStyle = \"rgba(255,0,0,0.8)\";\n  }\n});\nChart.pluginService.register({\n  id: \"dynamicBubbleSize\",\n  beforeUpdate: function beforeUpdate(chart) {\n    if (chart.mean) {\n      var chartData = chart.config.data; // sample dataset\n\n      var dyanamicSize = 50 / chartData.labels.length;\n      var minSize = 2;\n      chartData.datasets[1].radius = dyanamicSize > minSize ? dyanamicSize : minSize;\n    }\n  }\n});\n\n//# sourceURL=webpack:///./dist/es/oneProportion/chartModule.js?");

/***/ }),

/***/ "./dist/es/oneProportion/oneProportion.js":
/*!************************************************!*\
  !*** ./dist/es/oneProportion/oneProportion.js ***!
  \************************************************/
/*! exports provided: OneProportion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OneProportion\", function() { return OneProportion; });\n/* harmony import */ var _chartModule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chartModule.js */ \"./dist/es/oneProportion/chartModule.js\");\n/* harmony import */ var _calculation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calculation.js */ \"./dist/es/oneProportion/calculation.js\");\n/* harmony import */ var _util_translate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/translate.js */ \"./dist/es/util/translate.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n\nvar OneProportion = function OneProportion(ele) {\n  var _this = this;\n\n  _classCallCheck(this, OneProportion);\n\n  this.initState = function () {\n    return {\n      noOfCoin: 5,\n      probability: 0.5,\n      labels: [],\n      binomail: [],\n      samples: [],\n      selected: [],\n      mean: NaN,\n      std: NaN,\n      noOfSelected: 0,\n      totalSamples: 0,\n      lowerSelectedRange: 0,\n      upperSelectedRange: 0,\n      thisSampleSizes: 1,\n      zoomIn: false\n    };\n  };\n\n  this.ele = {\n    probabilityInput: document.getElementById(\"probability\"),\n    coinsInput: document.getElementById(\"coins\"),\n    probDisplay: document.getElementById(\"probDisplay\"),\n    tossesDisplay: document.querySelectorAll(\"#tossesDisplay\"),\n    lowerDisplay: document.getElementById(\"lowerDisplay\"),\n    upperDisplay: document.getElementById(\"upperDisplay\"),\n    drawInput: document.getElementById(\"draws\"),\n    chart: document.getElementById(\"chart\"),\n    totalSamples: document.getElementById(\"totalSamples\"),\n    lowerSelectedRange: document.getElementById(\"lowerSelectedRange\"),\n    upperSelectedRange: document.getElementById(\"upperSelectedRange\"),\n    sampleInRangeDisplay: document.getElementById(\"sampleInRangeDisplay\"),\n    resetBtn: document.getElementById(\"resetBtn\"),\n    sampleBtn: document.getElementById(\"sampleBtn\"),\n    proportionDisplay: document.getElementById(\"proportionDisplay\"),\n    meanDisplay: document.getElementById(\"meanDisplay\"),\n    stdDisplay: document.getElementById(\"stdDisplay\")\n  };\n  this.state = this.initState();\n  this.translationData = _util_translate_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].oneProportion; // console.log('one',this.translationData)\n\n  this.chart = new _chartModule_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.ele.chart, this.translationData);\n\n  this.reset = function (e) {\n    _this.state = _this.initState();\n\n    _this.updateView(_this.state, _this.ele);\n\n    e.preventDefault();\n  };\n\n  this.reSampleWithSameSampleSize = function (state) {\n    var reSamples = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].drawSamples(state.probability, state.noOfCoin, state.totalSamples);\n    state.samples = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].addSamples(Array(state.noOfCoin + 1).fill(0), reSamples);\n\n    _this.updateState(state);\n\n    _this.updateView(state, _this.ele);\n  };\n\n  this.loadEventListener = function () {\n    _this.ele.probabilityInput.addEventListener(\"input\", function (e) {\n      _this.state.probability = Number(e.target.value);\n      probDisplay.innerText = Number(e.target.value);\n    });\n\n    _this.ele.probabilityInput.addEventListener(\"change\", function () {\n      if (_this.state.labels.length !== 0) {\n        _this.reSampleWithSameSampleSize(_this.state);\n      }\n    }); // this.ele.coinsInput.addEventListener(\"change\", e => {\n    //   this.ele.tossesDisplay.forEach(\n    //     x => (x.innerText = Number(e.target.value))\n    //   );\n    //   this.state.noOfCoin = Number(e.target.value);\n    // });\n\n\n    _this.ele.coinsInput.addEventListener(\"change\", function (e) {\n      _this.ele.tossesDisplay.forEach(function (x) {\n        return x.innerText = Number(e.target.value);\n      });\n\n      _this.state.noOfCoin = Number(e.target.value);\n\n      if (_this.state.labels.length !== 0) {\n        _this.reSampleWithSameSampleSize(_this.state);\n      }\n    });\n\n    _this.ele.drawInput.addEventListener(\"change\", function (e) {\n      _this.state.thisSampleSizes = Number(e.target.value);\n    });\n\n    _this.ele.resetBtn.addEventListener(\"click\", _this.reset);\n\n    _this.ele.sampleBtn.addEventListener(\"click\", function (e) {\n      _this.state.totalSamples += _this.state.thisSampleSizes;\n      var _this$state = _this.state,\n          probability = _this$state.probability,\n          noOfCoin = _this$state.noOfCoin,\n          thisSampleSizes = _this$state.thisSampleSizes;\n      var newSamples = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].drawSamples(probability, noOfCoin, thisSampleSizes);\n      if (_this.state.samples.length === 0) _this.state.samples = Array(_this.state.noOfCoin + 1).fill(0);\n      _this.state.samples = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].addSamples(_this.state.samples, newSamples);\n\n      _this.updateState(_this.state);\n\n      _this.updateView(_this.state, _this.ele);\n\n      e.preventDefault();\n    });\n    /**\n     * Double Click to Zoom in if no of toss > 50;\n     */\n\n\n    _this.ele.chart.addEventListener(\"dblclick\", function () {\n      if (!_this.state.zoomIn && _this.state.noOfCoin >= 50) _this.state.zoomIn = true;else _this.state.zoomIn = false;\n\n      _this.chart.updateChartData(_this.state);\n    });\n\n    _this.ele.lowerSelectedRange.addEventListener(\"input\", function (e) {\n      _this.state.lowerSelectedRange = Number(e.target.value);\n\n      _this.updateState(_this.state);\n\n      _this.updateView(_this.state, _this.ele);\n    });\n\n    _this.ele.upperSelectedRange.addEventListener(\"input\", function (e) {\n      _this.state.upperSelectedRange = Number(e.target.value);\n\n      _this.updateState(_this.state);\n\n      _this.updateView(_this.state, _this.ele);\n    });\n  };\n\n  this.updatedSelectedSamples = function (state) {\n    var lowerSelectedRange = state.lowerSelectedRange,\n        upperSelectedRange = state.upperSelectedRange;\n    state.noOfSelected = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].calculateSamplesSelected(lowerSelectedRange, upperSelectedRange, state.samples);\n    state.selected = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].generateSelectedArray(lowerSelectedRange, upperSelectedRange, state.noOfCoin);\n  };\n\n  this.updateState = function (state) {\n    state.labels = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].generateLabels(state.noOfCoin);\n    state.binomail = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].calculateBinonimal(state.noOfCoin, state.probability, state.totalSamples);\n    state.mean = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].calculateMean(state.samples);\n    state.std = _calculation_js__WEBPACK_IMPORTED_MODULE_1__[\"cal\"].calucalteStd(state.samples); // this.state.zoomIn = state.noOfCoin >= 50 ? true : false;\n\n    _this.updatedSelectedSamples(state);\n  };\n\n  this.updateView = function (state, ele) {\n    var probability = state.probability,\n        noOfCoin = state.noOfCoin,\n        totalSamples = state.totalSamples,\n        mean = state.mean,\n        std = state.std,\n        thisSampleSizes = state.thisSampleSizes,\n        noOfSelected = state.noOfSelected,\n        lowerSelectedRange = state.lowerSelectedRange,\n        upperSelectedRange = state.upperSelectedRange;\n    ele.probDisplay.innerText = probability;\n    ele.tossesDisplay.innerText = noOfCoin;\n    ele.totalSamples.innerText = totalSamples;\n    ele.meanDisplay.innerText = mean.toFixed(3);\n    ele.stdDisplay.innerText = std.toFixed(3);\n    ele.drawInput.value = thisSampleSizes;\n    ele.coinsInput.value = noOfCoin;\n    ele.lowerSelectedRange.setAttribute(\"max\", noOfCoin);\n    ele.upperSelectedRange.setAttribute(\"max\", noOfCoin);\n    ele.probabilityInput.value = probability;\n    ele.sampleInRangeDisplay.innerText = noOfSelected;\n    if (lowerSelectedRange > noOfCoin) _this.state.lowerSelectedRange = noOfCoin;\n    if (upperSelectedRange > noOfCoin) _this.state.upperSelectedRange = noOfCoin;\n    ele.lowerSelectedRange.value = lowerSelectedRange;\n    ele.upperSelectedRange.value = upperSelectedRange;\n    ele.lowerDisplay.innerText = lowerSelectedRange;\n    ele.upperDisplay.innerText = upperSelectedRange;\n    ele.proportionDisplay.innerText = \"\".concat(noOfSelected, \" / \").concat(totalSamples, \" = \").concat((noOfSelected / totalSamples).toFixed(3));\n\n    _this.chart.updateChartData(state);\n  };\n\n  this.updateView(this.state, this.ele);\n  this.loadEventListener();\n};\n\n//# sourceURL=webpack:///./dist/es/oneProportion/oneProportion.js?");

/***/ }),

/***/ "./dist/es/oneProportion/oneProportionEntry.js":
/*!*****************************************************!*\
  !*** ./dist/es/oneProportion/oneProportionEntry.js ***!
  \*****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _oneProportion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./oneProportion.js */ \"./dist/es/oneProportion/oneProportion.js\");\n\nwindow.oneProportion = new _oneProportion_js__WEBPACK_IMPORTED_MODULE_0__[\"OneProportion\"](document.getElementById('one-proportion'));\n\n//# sourceURL=webpack:///./dist/es/oneProportion/oneProportionEntry.js?");

/***/ }),

/***/ "./dist/es/util/translate.js":
/*!***********************************!*\
  !*** ./dist/es/util/translate.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar translation = {\n  \"about\": {\n    \"contact\": \"Contacto\",\n    \"content1\": \"Las visualizaciones de análisis estadístico para estadísticas introductorias (SAVIS) se concibieron como parte de un proyecto de investigación colaborativa sobre educación estadística entre el Departamento de Matemáticas y Estadísticas de la Universidad Estatal de California en Sacramento (CSUS) y la Facultad de Matemáticas de la Universidad Autónoma de Yucatán (UADY) . SAVIS es una herramienta educativa para ayudar a comprender intuitivamente conceptos de pruebas de hipótesis estadísticas e intervalos de confianza mediante visualizaciones basadas en técnicas de muestreo y aleatorización. SAVIS tiene una versión en línea y una versión independiente (ambas disponibles gratuitamente) en inglés y español.\",\n    \"content2\": \"SAVIS fue creado en la primavera de 2019 y extendido en la primavera de 2020 por los siguientes graduados del Departamento de Informática de CSUS bajo la dirección de Rafael E. Díaz Escamilla, profesor del Departamento de Matemáticas y Estadística de CSUS:\",\n    \"contributors\": \"Contribuidores\",\n    \"title\": \"Acerca de SAVIS\"\n  },\n  \"download\": {\n    \"title\": \"Bajar Archivo\"\n  },\n  \"home\": {\n    \"title\": \"Inicio\"\n  },\n  \"oneMean\": {\n    \"InInterval\": \"Valores en intervalo\",\n    \"NotInInterval\": \"Valores no en intervalo\",\n    \"Samples\": \"Muestras\",\n    \"build\": \"Construir\",\n    \"chartTitle2\": \"Generar Población Hipotética\",\n    \"chartTitle4\": \"Distribucón de las Medias\",\n    \"ci\": \"Nivel de confianza\",\n    \"cititle\": \"Un intervalo de confianza medio\",\n    \"drawSample\": \"Obtenga la Muestra\",\n    \"enterData\": \"Teclee los Datos\",\n    \"errorNoPopulation\": \"No hay población\",\n    \"errorNotEnoughElements\": \"La muestra excede la población\",\n    \"extremeSamples\": \"Medias iguales a o más extremas que\",\n    \"hypotheticalPopulation\": \"Poblacíon Hipotética\",\n    \"id\": \"#\",\n    \"increaseData\": \"Incremente la muestra\",\n    \"loadData\": \"Cargar Datos\",\n    \"lower\": \"Límite inferior\",\n    \"mean1\": \"Media:\",\n    \"mean2\": \"Media\",\n    \"meanOfsamplesMeans\": \"Media de las medias:\",\n    \"mostRecentDraw\": \"Ultima Muestra\",\n    \"noData\": \"NaN\",\n    \"noOfSample\": \"# de muestras\",\n    \"oneTailLeft\": \"Una cola (izquierda)\",\n    \"oneTailRight\": \"Una cola (derecha)\",\n    \"original\": \"Datos Originales\",\n    \"originalSize\": \"Talla n:\",\n    \"pleaseSelect\": \"Tipo de Prueba\",\n    \"proportion\": \"Proporción:\",\n    \"reset\": \"Reinicio\",\n    \"runSim\": \"Correr Simulación\",\n    \"sample\": \"Muestra XXX\",\n    \"sampleMeans\": \"medias\",\n    \"sampleNo\": \"#\",\n    \"sampleSize\": \"Tamaño de muestra\",\n    \"samples\": \"muestras\",\n    \"sd1\": \"Desviación Estándar:\",\n    \"selectData\": \"Seleccione Datos Muestra\",\n    \"shiftMean\": \"Desplace la media\",\n    \"std\": \"Desviación Estándar\",\n    \"textAreaPlaceHolder\": \"Teclee datos aquí o arrastre archivo csv (sin títulos de columna - ver datos muestra en el menu de arriba)\",\n    \"times\": \"veces\",\n    \"title\": \"Una Media Prueba de hipótesis\",\n    \"totalNoOfSamples\": \"Total # de muestras:\",\n    \"totalSamples\": \"Total # muestras:\",\n    \"twoTail\": \"Dos colas\",\n    \"upload\": \"Subir archivo de datos\",\n    \"upper\": \"Límite superior\",\n    \"value\": \"Dato\"\n  },\n  \"oneProportion\": {\n    \"InInterval\": \"Valores en intervalo\",\n    \"NotInInterval\": \"Valores no en intervalo\",\n    \"Samples\": \"Muestras\",\n    \"addSamples\": \"Agregar Muestras\",\n    \"alertAtLeastOne\": \"Debe tener al menos uno éxitos y fracasos\",\n    \"binomial\": \"Predicción Binomial\",\n    \"build\": \"Construir\",\n    \"ci\": \"Nivel de confianza\",\n    \"cititle\": \"Intervalo de confianza de una proporción\",\n    \"data\": \"Datos\",\n    \"drawSamples\": \"Obtener Muestras:\",\n    \"enterData\": \"Teclee los Datos\",\n    \"failures\": \"Fracasos\",\n    \"inc\": \"Aumentado por\",\n    \"incrementWarning\": \"Incremente los datos para el grupo\",\n    \"incrementZeroWarning\": \"El aumento por factor debe ser mayor que cero\",\n    \"loadData\": \"Cargar Datos\",\n    \"lower\": \"Límite inferior\",\n    \"maxHead\": \"Max # de caras:\",\n    \"meanNoOfHeads\": \"Media # de caras:\",\n    \"meanOfSampleDiff\": \"Media de proporciones muestrales\",\n    \"minHead\": \"Min # de caras:\",\n    \"mostRecentDraw\": \"Ultima Muestra\",\n    \"noData\": \"NaN\",\n    \"noOfHeads\": \"# de muestras en\",\n    \"noOfSamples\": \"# de muestras\",\n    \"noOfSims\": \"# Simulaciones\",\n    \"probHeads\": \"Probabilidad de Caras p:\",\n    \"propOfRandom\": \"Proporción de éxitos del sorteo más reciente\",\n    \"proportion\": \"Proporción:\",\n    \"proportion1\": \"Proporción de éxitos:\",\n    \"remark1\": \"1. Haga dos clics en al gráfica para agrandarla o disminuirla si el # de lanzamientos es >= 50.\",\n    \"remark2\": \"2. Haga un clic en las leyendas para mostrar/esconder infromación correspondiente.\",\n    \"remarkTitle\": \"Notas:\",\n    \"reset\": \"Reinicio\",\n    \"runSims\": \"Correr Simulaciones\",\n    \"samplesInterval\": \"# de muestras en intervalo:\",\n    \"selectInterval\": \"Seleccione intervalo para el # de caras en\",\n    \"selected\": \"Seleccionadas\",\n    \"standardDeviation\": \"Desviación Estándar\",\n    \"std\": \"Desviación Estándar:\",\n    \"subTitle3\": \"Distribución muestral de proporciones\",\n    \"successes\": \"Éxitos\",\n    \"title\": \"Una Proporción Prueba de hipótesis\",\n    \"tosses1\": \"Lanzamientos:\",\n    \"tosses2\": \"lanzamientos:\",\n    \"totalSamples\": \"Total # de muestras:\",\n    \"upper\": \"Límite superior\"\n  },\n  \"site\": {\n    \"title\": \"Statistical Analysis Visualizations for Introductory Statistics\"\n  },\n  \"tailChart\": {\n    \"oneTailLeft\": \"Una cola (izquierda)\",\n    \"oneTailRight\": \"Una cola (derecha)\",\n    \"pleaseSelect\": \"Tipo de Prueba\",\n    \"twoTail\": \"Dos colas\"\n  },\n  \"twoMean\": {\n    \"InInterval\": \"Valores en intervalo\",\n    \"NotInInterval\": \"Valores no en intervalo\",\n    \"Samples\": \"Muestras\",\n    \"alertAtLeastOne\": \"Grupo 1 y Grupo 2 tienen que tener ambos al menos un elemento.\",\n    \"build\": \"Construir\",\n    \"ci\": \"Nivel de confianza\",\n    \"cititle\": \"Intervalo de confianza de dos medios\",\n    \"diffOfMean\": \"Diferencia entre Medias (Media 1 - Media 2):\",\n    \"diffOfSampleMean\": \"Differencia entre medias (de muestras aleatorizadas):\",\n    \"differences\": \"Diferencias\",\n    \"enterData\": \"Teclee los Datos\",\n    \"gp1Mean\": \"Media 1 (Grupo 1):\",\n    \"gp1SD\": \"Desviación Estándar (Grupo 1):\",\n    \"gp2Mean\": \"Media 2 (Grupo 2):\",\n    \"gp2SD\": \"Desviación Estándar (Grupo 2):\",\n    \"group1\": \"Grupo 1\",\n    \"group2\": \"Grupo 2\",\n    \"inc1\": \"Aumentar en (Grupo 1)\",\n    \"inc2\": \"Aumentar en (Grupo 2)\",\n    \"incrementWarning\": \"Incremente los datos para el grupo\",\n    \"incrementZeroWarning\": \"El aumento por factor debe ser mayor que cero\",\n    \"loadData\": \"Cargar Datos\",\n    \"lower\": \"Límite inferior\",\n    \"meanSampleDiff\": \"Media de las Diferencias:\",\n    \"mostRecentDraw\": \"Ultima Muestra\",\n    \"noData\": \"NaN\",\n    \"numSelected\": \"# de Diferencias Extremas:\",\n    \"numSim\": \"# de Simulaciones\",\n    \"oriDiffOfMean\": \"Diferencia de Medias en Datos Originales:\",\n    \"placeholder\": \"Teclee datos o arrastre aquí archivo csv: primera columa para codigo de grupos (1 o 2), segunda colunmna para la variable (sin títulos de columna - ver datos muestra en el menu de arriba)\",\n    \"proportionSelcted\": \"Proporción de Diferencias Extremas:\",\n    \"randomMean1\": \"Media de la Muestra Randomizada al Grupo 1:\",\n    \"randomMean2\": \"Media de la Muestra Randomizada al Grupo 2:\",\n    \"randomSD1\": \"Desviación Estándar de la Muestra Randomizada al Grupo 1:\",\n    \"randomSD2\": \"Desviación Estándar de la Muestra Randomizada al Grupo 2:\",\n    \"reset\": \"Reinicio\",\n    \"runSim\": \"Correr Simulacón\",\n    \"runSims\": \"Correr Simulaciones\",\n    \"selectAllExtreme\": \"Seleccionar las diferencias iguales a o más extremas que:\",\n    \"selectData\": \"Seleccione Datos Muestra\",\n    \"size1\": \"Tamaño n (Grupo 1):\",\n    \"size2\": \"Tamaño n (Grupo 2):\",\n    \"stdSampleDiff\": \"Desviación Estándar:\",\n    \"subTitle3\": \"Distribución de diferencias de medias\",\n    \"title\": \"Dos Medias Prueba de hipótesis\",\n    \"totalSamples\": \"Total # de muestras:\",\n    \"upload\": \"Subir archivo de datos\",\n    \"upper\": \"Límite superior\"\n  },\n  \"twoProportions\": {\n    \"InInterval\": \"Valores en intervalo\",\n    \"NotInInterval\": \"Valores no en intervalo\",\n    \"alertAtLeastOne\": \"Grupo A y Grupo B tienen que tener ambos al menos un elemento.\",\n    \"build\": \"Construir\",\n    \"ci\": \"Nivel de confianza\",\n    \"cititle\": \"Intervalo de confianza de dos proporciones\",\n    \"diffOfProp\": \"Differencias de Proporciones\",\n    \"differences\": \"Diferencias\",\n    \"enterData\": \"Teclee los Datos\",\n    \"failures\": \"Fracasos\",\n    \"groupA\": \"Grupo A\",\n    \"groupB\": \"Grupo B\",\n    \"inc\": \"Aumentado por\",\n    \"incrementWarning\": \"Incremente los datos para el grupo\",\n    \"incrementZeroWarning\": \"El aumento por factor debe ser mayor que cero\",\n    \"loadData\": \"Subir Datos\",\n    \"lower\": \"Límite inferior\",\n    \"meanOfSampleDiff\": \"Media de las Diferencias de Proporciones:\",\n    \"mostRecentDraw\": \"Ultima Muestra\",\n    \"noData\": \"NaN\",\n    \"noOfSelected\": \"# Diferencias Extremas:\",\n    \"noOfSims\": \"# Simulaciones\",\n    \"noSim\": \"N/A\",\n    \"oriDatasetDiff\": \"Differencia de Proporciones en Datos Originales:\",\n    \"propGroupA\": \"Proporción de Exitos en Grupo A\",\n    \"propGroupB\": \"Proporción de Exitos en Grupo B\",\n    \"propOfRandomA\": \"Proporción de Exitos Randomizados al Grupo A\",\n    \"propOfRandomB\": \"Proporción de Exitos Randomizados al Grupo B\",\n    \"propSamplesSelected\": \"Proporción de Diferencias Extremas\",\n    \"runSims\": \"Correr Simulaciones\",\n    \"selectAllExtreme\": \"Seleccionar las diferencias iguales a o más extremas que:\",\n    \"std\": \"Desviación Estándar:\",\n    \"subTitle3\": \"Distribución de las Differencias de Proporciones\",\n    \"successes\": \"Exitos\",\n    \"title\": \"Dos Proporciones Prueba de hipótesis\",\n    \"totalSamples\": \"Total # de Muestras:\",\n    \"upper\": \"Límite superior\"\n  },\n  \"userManual\": {\n    \"title\": \"Manual del Usuario\"\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (translation);\n\n//# sourceURL=webpack:///./dist/es/util/translate.js?");

/***/ })

/******/ });